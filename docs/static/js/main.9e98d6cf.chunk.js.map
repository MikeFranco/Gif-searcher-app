{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","defaultProps","getGifs","category","a","getUrl","encodeURI","fetch","resp","json","data","newGifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","gifs","loading","state","setState","useEffect","then","imgs","useFetchGifs","gif","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,sBAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAIhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbhB,SAAAP,GACxBF,EAAcE,EAAEQ,OAAOF,aAiB3BZ,EAAYe,WAAa,CACvBd,cAAee,IAAUC,KAAKC,YAGhClB,EAAYmB,aAAe,G,mCC5BdC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,mCACTC,EAFe,iDAEoCC,UAAUH,GAF9C,6BACN,oCADM,SAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAUD,EAAKE,KAAI,SAAAC,GAAG,YAAK,CAC/BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QATf,kBAYdL,GAZc,4CAAH,sDCEPQ,EAAc,SAAC,GAAuB,EAArBL,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACvC,OACE,sBAAKI,UAAU,yCAAf,UACE,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QCFGQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAIVqB,ECLY,SAAArB,GAAa,IAAD,EACZnB,mBAAS,CACjC0B,KAAM,GACNe,SAAS,IAH2B,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAAAC,GACrBH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGZ,CAACtB,IAEGuB,EDVgBK,CAAa5B,GAA5BO,KAER,OACE,qCACE,oBAAIU,UAAU,oCAAd,SAAmDjB,IACnD,qBAAKiB,UAAU,YAAf,SACGI,EAAKZ,KAAI,SAAAoB,GAAG,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIlB,aEMjBmB,EAjBM,WAAO,IAAD,EACWjD,mBAAS,CAAC,gBADrB,mBAClBQ,EADkB,KACNT,EADM,KAGzB,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGS,EAAWoB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCTxB+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.9e98d6cf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories(categories => [inputValue, ...categories]);\n      setInputValue('');\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.protoTypes = {\n  setCategories: PropTypes.func.isRequired\n};\n\nAddCategory.defaultProps = {};\n","export const getGifs = async (category) => {\n  const apiKey = 'dy1O6jW1aHRdpkSnFo9jXc6iqicizloS';\n  const getUrl = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\n  const resp = await fetch(getUrl);\n  const { data } = await resp.json();\n\n  const newGifs = data.map(img => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url\n  }));\n\n  return newGifs;\n};","import React from 'react';\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n  /* const [gifs, setGifs] = useState([]);\n  \n  */\n  const { data: gifs } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n      <div className='card-grid'>\n        {gifs.map(gif => (\n          <GifGridItem key={gif.id} {...gif} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = category => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs(category).then(imgs => {\n      setState({\n        data: imgs,\n        loading: false\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Dragon Ball']);\n\n  return (\n    <>\n      <h2>Gif Expert App</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map(category => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}